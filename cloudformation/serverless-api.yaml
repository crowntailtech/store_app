AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for MongoDB-backed API using Lambda and API Gateway with logging"

Parameters:
  MongoDBConnectionString:
    Type: String
    Description: "MongoDB Atlas Connection URI"

  LambdaS3Bucket:
    Type: String
    Description: "S3 Bucket where all Lambda function code is stored"

Resources:

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:HeadObject"
                Resource: !Sub "arn:aws:s3:::${LambdaS3Bucket}/products/*"

  # CloudWatch Log Groups for All Lambda Functions
  LambdaLogGroupAddProduct:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AddProductLambda}"
      RetentionInDays: 7

  LambdaLogGroupGetProducts:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetProductsLambda}"
      RetentionInDays: 7

  LambdaLogGroupGetProductById:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetProductByIdLambda}"
      RetentionInDays: 7

  # Lambda Functions
  AddProductLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "AddProduct"
      Runtime: python3.8
      Handler: add_product.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "add_product.zip"
      Environment:
        Variables:
          MONGO_URI: !Ref MongoDBConnectionString
          S3_BUCKET: !Ref LambdaS3Bucket
      Timeout: 10
    UpdateReplacePolicy: Retain  # ✅ Prevents deletion on update
    DeletionPolicy: Retain 

  GetProductsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "GetProducts"
      Runtime: python3.8
      Handler: get_products.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "get_products.zip"
      Environment:
        Variables:
          MONGO_URI: !Ref MongoDBConnectionString
          S3_BUCKET: !Ref LambdaS3Bucket
      Timeout: 10
    UpdateReplacePolicy: Retain  # ✅ Prevents deletion on update
    DeletionPolicy: Retain 

  GetProductByIdLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "GetProductById"
      Runtime: python3.8
      Handler: get_product_by_id.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "get_product_by_id.zip"
      Environment:
        Variables:
          MONGO_URI: !Ref MongoDBConnectionString
          S3_BUCKET: !Ref LambdaS3Bucket
      Timeout: 10
    UpdateReplacePolicy: Retain  # ✅ Prevents deletion on update
    DeletionPolicy: Retain 

  # Lambda Function for Deleting a Product
  DeleteProductLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "DeleteProduct"
      Runtime: python3.8
      Handler: delete_product.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "delete_product.zip"
      Environment:
        Variables:
          MONGO_URI: !Ref MongoDBConnectionString
          S3_BUCKET: !Ref LambdaS3Bucket
      Timeout: 10

  # Lambda Function for Updating a Product
  UpdateProductLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "UpdateProduct"
      Runtime: python3.8
      Handler: update_product.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: "update_product.zip"
      Environment:
        Variables:
          MONGO_URI: !Ref MongoDBConnectionString
          S3_BUCKET: !Ref LambdaS3Bucket
      Timeout: 10

  RegisterUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RegisterUser
      Runtime: python3.8
      Handler: register_user.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: register_user.zip
      Environment:
        Variables:
          MONGO_URI: !Ref MongoDBConnectionString
      Timeout: 10

  RegisterUserFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt RegisterUserLambda.Arn

  RegisterUserPermissionForUrl:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RegisterUserLambda
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

  LoginUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LoginUser
      Runtime: python3.8
      Handler: login_user.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: login_user.zip
      Environment:
        Variables:
          MONGO_URI: !Ref MongoDBConnectionString
      Timeout: 10

  LoginUserFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt LoginUserLambda.Arn

  LoginUserPermissionForUrl:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoginUserLambda
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

  # API Gateway
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "MongoDBProductAPI"

  # API Gateway CloudWatch Log Group
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/api-gateway/${APIGateway}"
      RetentionInDays: 7

  # API Resources
  ProductsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: "products"

  ProductByIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !Ref ProductsResource
      PathPart: "{id}"

  # Resource for /register
  RegisterUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: "register"

  # Resource for /login
  LoginUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: "login"

  # API Methods
  AddProductMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref ProductsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddProductLambda.Arn}/invocations"

  GetProductsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref ProductsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProductsLambda.Arn}/invocations"

  GetProductByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref ProductByIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProductByIdLambda.Arn}/invocations"

  # API Method (DELETE /products/{id})
  DeleteProductMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref ProductByIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteProductLambda.Arn}/invocations"

  # API Method (PUT /products/{id})
  UpdateProductMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref ProductByIdResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateProductLambda.Arn}/invocations"

  LoginUserApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref LoginUserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginUserLambda.Arn}/invocations"

  RegisterUserApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref RegisterUserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUserLambda.Arn}/invocations"

  # API Gateway Permissions
  AddProductLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AddProductLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/POST/products"

  GetProductsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetProductsLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/GET/products"

  GetProductByIdLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetProductByIdLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/GET/products/*"

  # Grant API Gateway Permission to invoke DeleteProduct Lambda
  DeleteProductLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteProductLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/DELETE/products/*"

  # Grant API Gateway Permission to invoke UpdateProduct Lambda
  UpdateProductLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateProductLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/PUT/products/*"

  RegisterUserLambdaPermissionApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RegisterUserLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/POST/register"

  LoginUserLambdaPermissionApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoginUserLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/POST/login"

  # Force API Deployment Update
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AddProductMethod
      - GetProductsMethod
      - GetProductByIdMethod
      - DeleteProductMethod
      - UpdateProductMethod
      - RegisterUserApiMethod
      - LoginUserApiMethod
    Properties:
      RestApiId: !Ref APIGateway
      Description: !Sub "Deployment - ${AWS::StackName} - ${AWS::Region}"

  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "prod"
      RestApiId: !Ref APIGateway
      DeploymentId: !Ref APIDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","responseLength":"$context.responseLength"}'
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: "INFO"
          DataTraceEnabled: true
          MetricsEnabled: true
